#+title:                              A collection of R snippets of common and uncommon use
* Reading efficiently into files
#+begin_src
#+end_src
* Use the apply family functions as for loops over lists of items
Here we use sapply to iterate a function over a list of columns of a df, and this renders out a final list of dfs, the second argument to the func is passed to sapply after the actual function definition. USE.NAMES set to true sets the names of the output list to match the input names of the df columns while simplify set to false prevents sapply from squishing the dfs into a single one at the end of the operation.
#+begin_src R  
test <- sapply(
    colnames(scores_df),
    function(col, tfs){
        tfs_sub_ordered <- tfs[order(tfs[col], decreasing=TRUE),]
         # clean up df from duplicates
        tfs_clean <- tfs_sub_ordered[which(!duplicated(tfs_sub_ordered$id_tfbs_info)),]
    
        # Convert scores to numeric (for some reasons they are character)
        tfs_clean[[col]] <- as.numeric(tfs_clean[[col]]) 
        
        # Create a new column also containing gene name (unique_id + gene_id)
        tfs_clean <- dplyr::mutate(tfs_clean, unique_geneid = paste(tfs_clean$unique_id, tfs_clean$gene_name, sep='_'))
    }, 
    tfs_sub,
    USE.NAMES=T, simplify=F
)
#+end_src

*  Use biomaRt to get entrez gene names from ensembl gene ids
#+begin_src R
library('biomaRt')
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
genes <- df$genes
df<-df[,-4]
G_list <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id","hgnc_symbol"),values=genes,mart= mart)
merge(df,G_list,by.x="gene",by.y="ensembl_gene_id")
#+end_src
